{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 dbt Course","text":"<p>Welcome to the practical dbt (data build tool) course using a database inspired by the Jaffle Shop project!</p>"},{"location":"#about-the-course","title":"\ud83d\udcda About the Course","text":"<p>This course is designed to teach the fundamental and advanced concepts of dbt through a practical and realistic project. The Jaffle Shop is a demonstration project that simulates an online store, allowing you to learn dbt with data that makes sense in the real world.</p>"},{"location":"#what-youll-learn","title":"\ud83c\udfaf What You'll Learn","text":"<ul> <li>\u2705 dbt Fundamentals: Basic concepts, installation and configuration</li> <li>\u2705 Project Structure: Organization of models, tests and documentation</li> <li>\u2705 Data Modeling: Staging, marts and analytical models</li> <li>\u2705 Testing &amp; Quality: Data quality assurance</li> <li>\u2705 Macros &amp; Reusability: Reusable and maintainable code</li> <li>\u2705 Documentation: Creating rich and interactive documentation</li> <li>\u2705 Best Practices: Industry standards and best practices</li> </ul>"},{"location":"#jaffle-shop-project","title":"\ud83c\udfea Jaffle Shop Project","text":"<p>The Jaffle Shop is a fictional online store that sells various products. The project includes:</p> <ul> <li>Customers: Demographic and contact information</li> <li>Products: Product catalog with categories</li> <li>Orders: Transactions and sold items</li> <li>Analytics: Business metrics and reports</li> </ul>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ol> <li>Project Setup: Project Setup</li> <li>Exploring Jaffle Shop: Project Overview</li> </ol>"},{"location":"#prerequisites","title":"\ud83d\udee0\ufe0f Prerequisites","text":"<ul> <li>Basic SQL knowledge</li> <li>Familiarity with data warehousing concepts</li> <li>Python 3.8+ installed</li> <li>Git for version control</li> </ul>"},{"location":"#course-structure","title":"\ud83d\udcd6 Course Structure","text":"<pre><code>graph TD\n    A[Introduction] --&gt; B[Jaffle Shop Project]\n    B --&gt; C[Advanced Concepts]\n    C --&gt; D[Best Practices]\n\n    B --&gt; F[Staging Models]\n    B --&gt; G[Mart Models]\n    B --&gt; H[Analytics Models]\n\n    C --&gt; I[Macros]\n    C --&gt; J[Testing]\n    C --&gt; K[Documentation]</code></pre>"},{"location":"#useful-links","title":"\ud83d\udd17 Useful Links","text":"<ul> <li>Official dbt Documentation</li> <li>dbt Community</li> <li>dbt Slack</li> <li>Project GitHub</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>This course is open source! Contributions are welcome:</p> <ul> <li>\ud83d\udc1b Report bugs</li> <li>\ud83d\udca1 Suggest improvements</li> <li>\ud83d\udcdd Fix errors</li> <li>\ud83c\udf1f Add new examples</li> </ul>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p> <p>Ready to start your dbt journey? \ud83c\udf89</p> <p>Let's start with project setup!</p>"},{"location":"course/","title":"\ud83d\udcda dbt Course","text":"<p>This practical dbt course uses the Jaffle Shop project to teach modern data transformation. You'll learn to build scalable models, implement data quality tests, and follow analytics engineering best practices.</p>"},{"location":"course/#course-sections","title":"\ud83d\udccb Course Sections","text":"<ul> <li>Sources - Configuration and documentation of data sources in dbt</li> <li>Models - Building transformation models with layered architecture</li> <li>Tests - Implementing data quality tests with built-in, dbt_utils, and custom tests</li> </ul>"},{"location":"course/models/","title":"\ud83c\udfd7\ufe0f Models in dbt","text":""},{"location":"course/models/#what-are-models","title":"\ud83c\udfaf What are Models?","text":"<p>Models are the core building blocks of dbt projects. At their essence, models are:</p> <ul> <li>SQL SELECT statements saved as <code>.sql</code> files in your <code>models/</code> directory</li> <li>Transformations that take raw data and convert it into analysis-ready datasets</li> <li>Materializations that can be created as tables, views, or incremental tables in your data warehouse</li> <li>Dependencies that reference other models using the <code>{{ ref() }}</code> function<ul> <li>In dbt, sources and refs serve a similar purpose to DNS in web infrastructure. Just like DNS translates human-friendly domain names into IP addresses\u2014ensuring that if a website's physical server changes, users can still access it without needing to know its new IP\u2014dbt's sources and refs abstract the underlying table names and locations. This means that if the location or name of a table changes in the data warehouse, models and analyses referencing it through ref or source continue to work without modification. This abstraction promotes modularity, flexibility, and maintainability, just as DNS simplifies and stabilizes internet navigation.</li> </ul> </li> </ul>"},{"location":"course/models/#how-models-work","title":"\ud83d\udd04 How Models Work","text":"<p>When you run <code>dbt run</code>, dbt:</p> <ol> <li>Reads your model SQL files</li> <li>Compiles them into executable SQL (resolving <code>{{ ref() }}</code> functions)</li> <li>Executes the SQL in your data warehouse</li> <li>Materializes the results as tables or views</li> <li>Tracks dependencies to run models in the correct order</li> </ol>"},{"location":"course/models/#model-anatomy","title":"\ud83d\udcdd Model Anatomy","text":"<p>Every dbt model follows this basic structure:</p> <pre><code>-- Model configuration (optional)\n{{ config(materialized='table') }}\n\n-- SQL SELECT statement\nSELECT\n    column1,\n    column2,\n    calculated_field\nFROM {{ ref('source_model') }}\nWHERE condition = true\n</code></pre>"},{"location":"course/models/#model-architecture","title":"\ud83c\udfdb\ufe0f Model Architecture","text":"<p>Our dbt project follows a three-layer architecture:</p> <pre><code>\ud83d\udcc1 models/\n\u251c\u2500\u2500 \ud83d\udcc1 staging/     # Data cleaning and standardization\n\u251c\u2500\u2500 \ud83d\udcc1 analytics/   # Business logic and dimensional modeling  \n\u2514\u2500\u2500 \ud83d\udcc1 marts/       # Final business-ready datasets\n</code></pre>"},{"location":"course/models/#layer-1-staging-models","title":"Layer 1: Staging Models \ud83e\uddf9","text":"<p>Staging models perform initial data cleaning and standardization. They're the foundation that ensures consistent, reliable data for downstream models.</p>"},{"location":"course/models/#stg_customerssql","title":"<code>stg_customers.sql</code>","text":"<ul> <li>Purpose: Cleans and standardizes customer data</li> <li>Key transformations:</li> <li>Trims whitespace from names and addresses</li> <li>Validates and standardizes email formats</li> <li>Cleans phone numbers using custom macro <code>clean_phone()</code></li> <li>Adds validation flags (<code>has_valid_email</code>, <code>has_valid_phone</code>)</li> </ul> <pre><code>-- Example transformation\nCASE \n    WHEN email LIKE '%@%'\n        THEN LOWER(TRIM(email))\nEND AS email,\nCOALESCE(email LIKE '%@%', FALSE) AS has_valid_email\n</code></pre>"},{"location":"course/models/#stg_orderssql","title":"<code>stg_orders.sql</code>","text":"<ul> <li>Purpose: Standardizes order data and adds business logic flags</li> <li>Key transformations:</li> <li>Validates and cleans monetary amounts</li> <li>Standardizes status values (<code>LOWER(TRIM(status))</code>)</li> <li>Adds business flags (<code>is_high_value_order</code>, <code>is_fulfilled</code>)</li> <li>Handles null dates and invalid amounts</li> </ul>"},{"location":"course/models/#stg_productssql","title":"<code>stg_products.sql</code>","text":"<ul> <li>Purpose: Cleans product catalog data</li> <li>Key transformations: Product name standardization, price validation</li> </ul>"},{"location":"course/models/#stg_itemssql","title":"<code>stg_items.sql</code>","text":"<ul> <li>Purpose: Standardizes order line items</li> <li>Key transformations: Quantity validation, price calculations</li> </ul>"},{"location":"course/models/#layer-2-analytics-models","title":"Layer 2: Analytics Models \ud83d\udcca","text":"<p>Analytics models contain business logic and implement dimensional modeling patterns.</p>"},{"location":"course/models/#dim_customerssql","title":"<code>dim_customers.sql</code>","text":"<ul> <li>Purpose: Creates a comprehensive customer dimension with behavioral metrics</li> <li>Key features:</li> <li>Aggregates customer order history</li> <li>Calculates customer lifetime value metrics</li> <li>Includes order frequency and recency analysis</li> </ul> <pre><code>-- Customer metrics example\nCOUNT(o.order_id) AS total_orders,\nSUM(o.total_amount) AS total_spent,\nAVG(o.total_amount) AS avg_order_value\n</code></pre>"},{"location":"course/models/#fct_orderssql","title":"<code>fct_orders.sql</code>","text":"<ul> <li>Purpose: Creates a fact table for order analysis</li> <li>Key features:</li> <li>Combines order header with item-level aggregations</li> <li>Calculates order-level metrics (total items, quantities)</li> <li>Links to customer dimension</li> </ul>"},{"location":"course/models/#layer-3-marts-models","title":"Layer 3: Marts Models \ud83c\udfea","text":"<p>Marts contain business-ready datasets optimized for specific use cases.</p>"},{"location":"course/models/#daily_sales_summarysql","title":"<code>daily_sales_summary.sql</code>","text":"<ul> <li>Purpose: Provides daily sales reporting and trend analysis</li> <li>Key features:</li> <li>Daily revenue aggregations</li> <li>Order count and customer metrics by day</li> <li>Time series data for dashboards</li> </ul>"},{"location":"course/models/#duplicate_customerssql","title":"<code>duplicate_customers.sql</code>","text":"<ul> <li>Purpose: Data quality mart identifying potential duplicate customers</li> <li>Key features: Customer deduplication analysis</li> </ul>"},{"location":"course/models/#model-dependencies","title":"\ud83d\udd17 Model Dependencies","text":"<p>Understanding model dependencies is crucial for maintaining your dbt project:</p> <pre><code>graph TD\n    A[raw_customers] --&gt; B[stg_customers]\n    C[raw_orders] --&gt; D[stg_orders]\n    E[raw_products] --&gt; F[stg_products]\n    G[raw_items] --&gt; H[stg_items]\n\n    B --&gt; I[dim_customers]\n    D --&gt; I\n    D --&gt; J[fct_orders]\n    H --&gt; J\n\n    D --&gt; K[daily_sales_summary]\n    B --&gt; L[duplicate_customers]</code></pre>"},{"location":"course/models/#best-practices-demonstrated","title":"\ud83d\udca1 Best Practices Demonstrated","text":""},{"location":"course/models/#1-naming-conventions","title":"1. Naming Conventions","text":"<ul> <li>Staging: <code>stg_[entity]</code> (e.g., <code>stg_customers</code>)</li> <li>Dimensions: <code>dim_[entity]</code> (e.g., <code>dim_customers</code>)</li> <li>Facts: <code>fct_[process]</code> (e.g., <code>fct_orders</code>)</li> <li>Marts: <code>descriptive_name</code> (e.g., <code>daily_sales_summary</code>)</li> </ul>"},{"location":"course/models/#2-sql-style","title":"2. SQL Style","text":"<ul> <li>CTEs (Common Table Expressions) for readability</li> <li>Consistent indentation and formatting</li> <li>Descriptive column aliases</li> <li>Comments for complex logic</li> </ul>"},{"location":"course/models/#3-data-quality","title":"3. Data Quality","text":"<ul> <li>Input validation in staging models</li> <li>Business rule enforcement</li> <li>NULL handling strategies</li> <li>Data type consistency</li> </ul>"},{"location":"course/models/#4-modularity","title":"4. Modularity","text":"<ul> <li>Single responsibility per model</li> <li>Clear separation of concerns</li> <li>Reusable transformations via macros</li> </ul>"},{"location":"course/models/#working-with-models","title":"\ud83d\udee0\ufe0f Working with Models","text":""},{"location":"course/models/#running-models","title":"Running Models","text":"<pre><code># Run all models\ndbt run\n\n# Run specific model\ndbt run --select stg_customers\n\n# Run models and downstream dependencies\ndbt run --select stg_customers+\n\n# Run staging layer only\ndbt run --select staging\n</code></pre>"},{"location":"course/models/#testing-models","title":"Testing Models","text":"<pre><code># Test all models\ndbt test\n\n# Test specific model\ndbt test --select dim_customers\n</code></pre>"},{"location":"course/models/#key-takeaways","title":"\ud83c\udfaf Key Takeaways","text":"<ol> <li>Layered architecture promotes maintainability and code reuse</li> <li>Staging models should focus on cleaning and standardization</li> <li>Analytics models implement business logic and dimensional modeling</li> <li>Marts provide business-ready datasets for specific use cases</li> <li>Clear naming conventions make projects easier to navigate</li> <li>Consistent SQL style improves readability and maintainability</li> </ol> <p>Next: Learn how to implement Tests to ensure data quality across all your models!</p>"},{"location":"course/sources/","title":"\ud83d\udcca Sources in dbt","text":"<p>Sources are the foundation of your dbt project. They represent the raw data tables in your data warehouse that serve as inputs to your transformation models.</p>"},{"location":"course/sources/#what-are-sources","title":"\ud83c\udfaf What are Sources?","text":"<p>Sources in dbt are a way to: - Document your raw data tables - Test data quality at the source level - Track lineage from raw data to final models - Version control your data schema expectations - Centralize source table references</p> <p>Think of sources as the \"entry points\" to your data transformation pipeline.</p>"},{"location":"course/sources/#source-configuration","title":"\ud83c\udfd7\ufe0f Source Configuration","text":"<p>Sources are defined in YAML files, typically in your <code>models/</code> directory or a dedicated <code>sources/</code> directory.</p>"},{"location":"course/sources/#basic-source-definition","title":"Basic Source Definition","text":"<pre><code># models/sources.yml\nversion: 2\n\nsources:\n  - name: jaffle_shop\n    description: \"Raw data from the Jaffle Shop e-commerce platform\"\n    tables:\n      - name: customers\n        description: \"Customer information\"\n      - name: orders  \n        description: \"Order transactions\"\n      - name: products\n        description: \"Product catalog\"\n</code></pre>"},{"location":"course/sources/#advanced-source-configuration","title":"Advanced Source Configuration","text":"<pre><code>version: 2\n\nsources:\n  - name: jaffle_shop\n    description: \"Raw data from the Jaffle Shop e-commerce platform\"\n    database: raw_data\n    schema: jaffle_shop_raw\n\n    tables:\n      - name: customers\n        description: \"Customer demographic and contact information\"\n        columns:\n          - name: id\n            description: \"Primary key for customers\"\n            tests:\n              - unique\n              - not_null\n          - name: first_name\n            description: \"Customer first name\"\n            tests:\n              - not_null\n          - name: email\n            description: \"Customer email address\"\n            tests:\n              - not_null\n              - unique\n\n        tests:\n          - dbt_utils.expression_is_true:\n              expression: \"id &gt; 0\"\n</code></pre>"},{"location":"course/sources/#using-sources-in-models","title":"\ud83d\udd17 Using Sources in Models","text":"<p>Once defined, sources are referenced using the <code>source()</code> function:</p>"},{"location":"course/sources/#basic-source-reference","title":"Basic Source Reference","text":"<pre><code>-- models/staging/stg_customers.sql\nselect\n    id as customer_id,\n    first_name,\n    last_name,\n    email,\n    created_at\nfrom {{ source('jaffle_shop', 'customers') }}\n</code></pre>"},{"location":"course/sources/#source-reference-with-alias","title":"Source Reference with Alias","text":"<pre><code>-- models/staging/stg_orders.sql\nselect\n    id as order_id,\n    user_id as customer_id,\n    order_date,\n    status,\n    total_amount\nfrom {{ source('jaffle_shop', 'orders') }} as raw_orders\nwhere order_date is not null\n</code></pre>"},{"location":"course/sources/#source-properties","title":"\ud83d\udccb Source Properties","text":""},{"location":"course/sources/#required-properties","title":"Required Properties","text":"<ul> <li><code>name</code>: Unique identifier for the source</li> <li><code>tables</code>: List of tables within the source</li> </ul>"},{"location":"course/sources/#optional-properties","title":"Optional Properties","text":"<ul> <li><code>description</code>: Human-readable description</li> <li><code>database</code>: Database name (if different from default)</li> <li><code>schema</code>: Schema name (if different from default)</li> <li><code>loader</code>: ETL tool that loads the data (Fivetran, Stitch, etc.)</li> <li><code>loaded_at_field</code>: Timestamp field indicating when data was loaded</li> </ul>"},{"location":"course/sources/#example-with-all-properties","title":"Example with All Properties","text":"<pre><code>sources:\n  - name: jaffle_shop\n    description: \"E-commerce platform data\"\n    database: \"{{ target.database }}\"\n    schema: raw_jaffle_shop\n    loader: fivetran\n    loaded_at_field: _fivetran_synced\n\n    tables:\n      - name: customers\n        description: \"Customer master data\"\n        identifier: dim_customers  # If table name differs\n        columns:\n          - name: customer_id\n            description: \"Unique customer identifier\"\n</code></pre>"},{"location":"course/sources/#testing-sources","title":"\ud83e\uddea Testing Sources","text":"<p>Sources support the same tests as models:</p>"},{"location":"course/sources/#column-level-tests","title":"Column-Level Tests","text":"<pre><code>sources:\n  - name: jaffle_shop\n    tables:\n      - name: customers\n        columns:\n          - name: id\n            tests:\n              - unique\n              - not_null\n          - name: email\n            tests:\n              - unique\n              - not_null\n              - dbt_utils.email_validator\n</code></pre>"},{"location":"course/sources/#table-level-tests","title":"Table-Level Tests","text":"<pre><code>sources:\n  - name: jaffle_shop\n    tables:\n      - name: orders\n        tests:\n          - dbt_utils.expression_is_true:\n              expression: \"total_amount &gt;= 0\"\n          - dbt_utils.at_least_one\n</code></pre>"},{"location":"course/sources/#custom-source-tests","title":"Custom Source Tests","text":"<pre><code>sources:\n  - name: jaffle_shop\n    tables:\n      - name: customers\n        tests:\n          - assert_customer_data_quality:\n              min_customers: 100\n</code></pre>"},{"location":"course/sources/#source-freshness","title":"\ud83d\udcc8 Source Freshness","text":"<p>Monitor how fresh your source data is:</p>"},{"location":"course/sources/#configure-freshness-checks","title":"Configure Freshness Checks","text":"<pre><code>sources:\n  - name: jaffle_shop\n    tables:\n      - name: orders\n        loaded_at_field: created_at\n        freshness:\n          warn_after: {count: 12, period: hour}\n          error_after: {count: 24, period: hour}\n</code></pre>"},{"location":"course/sources/#run-freshness-checks","title":"Run Freshness Checks","text":"<pre><code># Check freshness for all sources\ndbt source freshness\n\n# Check specific source\ndbt source freshness --select source:jaffle_shop\n\n# Check specific table\ndbt source freshness --select source:jaffle_shop.orders\n</code></pre>"},{"location":"course/sources/#best-practices","title":"\ud83d\ude80 Best Practices","text":""},{"location":"course/sources/#1-organization","title":"1. Organization","text":"<pre><code># Option 1: Single sources file\nmodels/sources.yml\n\n# Option 2: Source-specific files\nmodels/sources/\n\u251c\u2500\u2500 jaffle_shop.yml\n\u251c\u2500\u2500 marketing.yml\n\u2514\u2500\u2500 finance.yml\n\n# Option 3: Domain-specific organization\nmodels/\n\u251c\u2500\u2500 staging/\n\u2502   \u2514\u2500\u2500 jaffle_shop/\n\u2502       \u2514\u2500\u2500 sources.yml\n\u2514\u2500\u2500 marts/\n</code></pre>"},{"location":"course/sources/#2-naming-conventions","title":"2. Naming Conventions","text":"<ul> <li>Source names: Use the system/platform name (<code>salesforce</code>, <code>stripe</code>, <code>jaffle_shop</code>)</li> <li>Table names: Use original table names from source system</li> <li>Descriptions: Always include meaningful descriptions</li> </ul>"},{"location":"course/sources/#3-documentation-standards","title":"3. Documentation Standards","text":"<pre><code>sources:\n  - name: jaffle_shop\n    description: |\n      ## Jaffle Shop E-commerce Platform\n\n      Raw data from our e-commerce platform including:\n      - Customer demographics and contact information\n      - Order transactions and line items\n      - Product catalog with pricing\n\n      **Data Quality Notes:**\n      - Contains intentional data quality issues for learning\n      - Updated daily via CSV seed files\n      - Used for dbt training and testing\n</code></pre>"},{"location":"course/sources/#4-testing-strategy","title":"4. Testing Strategy","text":"<ul> <li>Always test primary keys (unique + not_null)</li> <li>Test critical fields that downstream models depend on</li> <li>Use freshness checks for time-sensitive data</li> <li>Document known issues in descriptions</li> </ul>"},{"location":"course/sources/#source-commands","title":"\ud83d\udd0d Source Commands","text":""},{"location":"course/sources/#essential-commands","title":"Essential Commands","text":"<pre><code># List all sources\ndbt ls --resource-type source\n\n# Run source tests\ndbt test --select source:*\n\n# Test specific source\ndbt test --select source:jaffle_shop\n\n# Check source freshness\ndbt source freshness\n\n# Compile source references\ndbt compile --select source:jaffle_shop.customers\n</code></pre>"},{"location":"course/sources/#advanced-usage","title":"Advanced Usage","text":"<pre><code># Test sources and downstream models\ndbt test --select source:jaffle_shop+\n\n# Run models that depend on a source\ndbt run --select source:jaffle_shop.customers+\n\n# Generate source documentation\ndbt docs generate --select source:*\n</code></pre>"},{"location":"course/sources/#source-vs-seeds-vs-models","title":"\ud83d\udcca Source vs Seeds vs Models","text":"Aspect Sources Seeds Models Purpose Reference external data Version control small datasets Transform data Data Location External database/warehouse CSV files in project Created by dbt Configuration YAML only YAML + CSV YAML + SQL Testing Column &amp; table tests Same as models Column &amp; table tests Materialization Not applicable Table (automatic) Configurable Usage <code>source()</code> function <code>ref()</code> function <code>ref()</code> function"},{"location":"course/sources/#when-to-use-sources","title":"\ud83c\udfaf When to Use Sources","text":"<p>\u2705 Use Sources for: - External database tables - Data warehouse raw tables - API endpoints loaded by ETL tools - Any data not created by dbt</p> <p>\u274c Don't Use Sources for: - CSV files (use seeds instead) - dbt models (use ref() instead) - Temporary/staging tables created by dbt</p>"},{"location":"course/sources/#next-steps","title":"\ud83d\udd17 Next Steps","text":"<p>After mastering sources, explore:</p> <ol> <li>Seeds- Version control small datasets</li> <li>Staging Models - Transform sources into clean data</li> <li>Model Testing - Comprehensive testing strategies</li> <li>Documentation - Document your data pipeline</li> </ol> <p>\ud83d\udca1 Remember: Sources are your data's entry point into dbt. Properly configured sources make your entire pipeline more reliable, testable, and maintainable!</p>"},{"location":"course/tests/","title":"\ud83e\uddea Tests in dbt","text":""},{"location":"course/tests/#what-are-tests","title":"\ud83c\udfaf What are Tests?","text":"<p>Tests in dbt are SQL queries that return failing rows. They're your data quality guardians that ensure your transformations produce reliable, accurate data. In dbt, tests are:</p> <ul> <li>Assertions about your data that should always be true</li> <li>Quality gates that prevent bad data from reaching production</li> <li>Documentation that describes expected data behavior</li> <li>Automated checks that run with every dbt execution</li> </ul>"},{"location":"course/tests/#how-tests-work","title":"\ud83d\udd0d How Tests Work","text":"<p>When you run <code>dbt test</code>, dbt:</p> <ol> <li>Compiles your test SQL into executable queries</li> <li>Executes each test against your data warehouse</li> <li>Evaluates results - if any rows are returned, the test fails</li> <li>Reports which tests passed or failed</li> <li>Stops execution (optionally) if critical tests fail</li> </ol>"},{"location":"course/tests/#test-anatomy","title":"\ud83d\udcdd Test Anatomy","text":"<p>A basic test follows this pattern:</p> <pre><code>-- This test PASSES if it returns zero rows\n-- This test FAILS if it returns any rows\n\nSELECT *\nFROM {{ ref('my_model') }}\nWHERE condition_that_should_never_be_true\n</code></pre>"},{"location":"course/tests/#types-of-tests-in-dbt","title":"\ud83c\udfd7\ufe0f Types of Tests in dbt","text":""},{"location":"course/tests/#1-built-in-tests","title":"1. Built-in Tests \u26a1","text":"<p>dbt comes with four essential tests out of the box:</p> <pre><code># schema.yml\nmodels:\n  - name: stg_customers\n    columns:\n      - name: customer_id\n        data_tests:\n          - unique          # No duplicate values\n          - not_null        # No missing values\n      - name: status\n        data_tests:\n          - accepted_values:\n              values: ['active', 'inactive']\n      - name: created_date\n        data_tests:\n          - relationships:\n              to: ref('dim_date')\n              field: date_key\n</code></pre>"},{"location":"course/tests/#2-dbt_utils-tests","title":"2. dbt_utils Tests \ud83d\udee0\ufe0f","text":"<p>The <code>dbt_utils</code> package provides powerful additional tests:</p>"},{"location":"course/tests/#expression-tests","title":"Expression Tests","text":"<pre><code># From our Jaffle Shop project\n- name: total_amount\n  data_tests:\n    - dbt_utils.expression_is_true:\n        arguments:\n          expression: \"&gt;= 0\"\n\n- name: quantity  \n  data_tests:\n    - dbt_utils.expression_is_true:\n        arguments:\n          expression: \"&gt; 0\"\n</code></pre>"},{"location":"course/tests/#other-dbt_utils-tests","title":"Other dbt_utils Tests","text":"<ul> <li><code>dbt_utils.unique_combination_of_columns</code> - Multi-column uniqueness</li> <li><code>dbt_utils.not_null_proportion</code> - Percentage of non-null values</li> <li><code>dbt_utils.recency</code> - Data freshness checks</li> <li><code>dbt_utils.equal_rowcount</code> - Compare row counts between tables</li> </ul>"},{"location":"course/tests/#3-custom-generic-tests","title":"3. Custom Generic Tests \ud83c\udfa8","text":"<p>Create reusable tests for your specific business logic:</p>"},{"location":"course/tests/#test_empty_stringsql","title":"<code>test_empty_string.sql</code>","text":"<pre><code>{% test empty_string(model, column_name) %}\n\nSELECT {{ column_name }}\nFROM {{ model }}\nWHERE LENGTH(TRIM({{ column_name }})) = 0\n\n{% endtest %}\n</code></pre>"},{"location":"course/tests/#test_not_negativesql","title":"<code>test_not_negative.sql</code>","text":"<pre><code>{% test not_negative(model, column_name) %}\n\nSELECT {{ column_name }}\nFROM {{ model }}\nWHERE {{ column_name }} IS NOT NULL\n  AND {{ column_name }} &lt; 0\n\n{% endtest %}\n</code></pre>"},{"location":"course/tests/#test_valid_datesql","title":"<code>test_valid_date.sql</code>","text":"<pre><code>{% test valid_date(model, column_name) %}\n\nSELECT {{ column_name }}\nFROM {{ model }}\nWHERE {{ column_name }} IS NOT NULL \n  AND (\n    {{ column_name }} &lt; '1900-01-01'\n    OR {{ column_name }} &gt; CURRENT_DATE + INTERVAL '1 year'\n  )\n\n{% endtest %}\n</code></pre>"},{"location":"course/tests/#4-singular-tests","title":"4. Singular Tests \ud83c\udfaf","text":"<p>Business-specific tests that don't fit the generic pattern:</p>"},{"location":"course/tests/#test_consistencysql","title":"<code>test_consistency.sql</code>","text":"<pre><code>-- Verifies if the number of orders in dim_customers matches stg_orders\nSELECT \n    c.customer_id,\n    c.total_orders as expected_orders,\n    COUNT(o.order_id) as actual_orders,\n    'Order count mismatch' as issue\nFROM {{ ref('dim_customers') }} c\nLEFT JOIN {{ ref('stg_orders') }} o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id, c.total_orders\nHAVING c.total_orders != COUNT(o.order_id)\n</code></pre>"},{"location":"course/tests/#test_daily_sales_consistencysql","title":"<code>test_daily_sales_consistency.sql</code>","text":"<pre><code>-- Complex validation comparing daily sales summary with order data\nWITH daily_order_summary AS (\n    SELECT\n        DATE(order_date) AS sale_date,\n        COUNT(DISTINCT order_id) AS actual_orders,\n        SUM(total_amount) AS actual_revenue\n    FROM {{ ref('stg_orders') }}\n    WHERE order_date IS NOT NULL\n    GROUP BY DATE(order_date)\n)\n\nSELECT *\nFROM {{ ref('daily_sales_summary') }} dss\nLEFT JOIN daily_order_summary dos ON dss.sale_date = dos.sale_date\nWHERE ABS(dss.total_revenue - dos.actual_revenue) &gt; 0.01\n</code></pre>"},{"location":"course/tests/#real-examples-from-jaffle-shop","title":"\ud83d\udcca Real Examples from Jaffle Shop","text":""},{"location":"course/tests/#schema-test-configuration","title":"Schema Test Configuration","text":"<pre><code># models/staging/staging.yml\nmodels:\n  - name: stg_customers\n    columns:\n      - name: customer_id\n        data_tests:\n          - unique\n          - not_null\n\n      - name: first_name\n        data_tests:\n          - not_null:\n              config:\n                severity: warn\n          - empty_string:\n              config:\n                severity: warn\n\n  - name: stg_orders\n    columns:\n      - name: total_amount\n        data_tests:\n          - not_null\n          - dbt_utils.expression_is_true:\n              arguments:\n                expression: \"&gt;= 0\"\n\n      - name: status\n        data_tests:\n          - accepted_values:\n              values: ['pending', 'processing', 'shipped', 'delivered', 'cancelled']\n</code></pre>"},{"location":"course/tests/#test-severity-levels","title":"Test Severity Levels","text":"<pre><code>data_tests:\n  - unique:\n      config:\n        severity: error    # Stops execution (default)\n  - not_null:\n      config:\n        severity: warn     # Continues but reports warning\n</code></pre>"},{"location":"course/tests/#test-configuration","title":"\ud83c\udf9b\ufe0f Test Configuration","text":""},{"location":"course/tests/#test-selection-and-execution","title":"Test Selection and Execution","text":"<pre><code># Run all tests\ndbt test\n\n# Run tests for specific model\ndbt test --select stg_customers\n\n# Run only generic tests\ndbt test --select test_type:generic\n\n# Run only singular tests  \ndbt test --select test_type:singular\n\n# Run tests with warnings\ndbt test --store-failures\n</code></pre>"},{"location":"course/tests/#test-documentation","title":"Test Documentation","text":"<pre><code>data_tests:\n  - unique:\n      config:\n        severity: error\n        error_if: \"&gt;= 1\"\n        warn_if: \"&gt;= 1\"\n        store_failures: true\n</code></pre>"},{"location":"course/tests/#testing-best-practices","title":"\ud83d\udca1 Testing Best Practices","text":""},{"location":"course/tests/#1-test-pyramid-strategy","title":"1. Test Pyramid Strategy","text":"<ul> <li>Many built-in tests (unique, not_null)</li> <li>Some generic tests (business rules)</li> <li>Few singular tests (complex scenarios)</li> </ul>"},{"location":"course/tests/#2-test-early-and-often","title":"2. Test Early and Often","text":"<ul> <li>Test in staging layer for data quality</li> <li>Test in analytics layer for business logic</li> <li>Test in marts layer for final validation</li> </ul>"},{"location":"course/tests/#3-meaningful-test-names","title":"3. Meaningful Test Names","text":"<pre><code>-- Good: Describes what the test validates\ntest_order_amounts_are_positive.sql\n\n-- Bad: Generic or unclear\ntest_orders.sql\n</code></pre>"},{"location":"course/tests/#4-performance-considerations","title":"4. Performance Considerations","text":"<ul> <li>Use <code>limit</code> for large datasets during development</li> <li>Consider test execution time in CI/CD pipelines</li> <li>Use <code>store_failures</code> strategically</li> </ul>"},{"location":"course/tests/#5-test-documentation","title":"5. Test Documentation","text":"<pre><code>data_tests:\n  - unique:\n      name: customer_id_uniqueness\n      description: \"Ensures each customer appears only once\"\n</code></pre>"},{"location":"course/tests/#working-with-tests","title":"\ud83d\udee0\ufe0f Working with Tests","text":""},{"location":"course/tests/#development-workflow","title":"Development Workflow","text":"<pre><code># Run model and its tests\ndbt run --select stg_customers\ndbt test --select stg_customers\n\n# Build model (run + test)\ndbt build -s \"stg_customers\"\n\n# Debug failing tests\ndbt test --select stg_customers --store-failures\n\n# Check stored failures\nSELECT * FROM my_schema.dbt_test_failures\n</code></pre>"},{"location":"course/tests/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># Typical CI pipeline\ndbt run --select state:modified+\ndbt test --select state:modified+\n\n# Or\ndbt build -s \"state:modified+\"\n</code></pre>"},{"location":"course/tests/#key-takeaways","title":"\ud83c\udfaf Key Takeaways","text":"<ol> <li>Tests are SQL queries that return failing rows</li> <li>Four built-in tests cover most basic scenarios</li> <li>dbt_utils tests provide advanced functionality</li> <li>Generic tests enable custom reusable logic</li> <li>Singular tests handle complex business scenarios</li> <li>Test configuration controls severity and behavior</li> <li>Testing strategy should follow the test pyramid</li> <li>Documentation and naming make tests maintainable</li> </ol> <p>Next: Learn about Documentation to make your dbt project self-documenting!</p>"},{"location":"intro/first-project/","title":"\ud83c\udfaf Creating Your First dbt Project","text":"<p>Now that your environment is configured, let's create your first dbt project! We'll use the Jaffle Shop project as an example.</p>"},{"location":"intro/first-project/#initializing-the-project","title":"\ud83d\ude80 Initializing the Project","text":""},{"location":"intro/first-project/#1-create-the-project","title":"1. Create the Project","text":"<pre><code># Navigate to the directory where you want to create the project\ncd ~/Projects\n\n# Initialize new dbt project\ndbt init jaffle_shop\n\n# Navigate to the project\ncd jaffle_shop\n</code></pre>"},{"location":"intro/first-project/#2-initial-structure","title":"2. Initial Structure","text":"<p>After initialization, you'll have:</p> <pre><code>jaffle_shop/\n\u251c\u2500\u2500 dbt_project.yml          # Main configuration\n\u251c\u2500\u2500 profiles.yml             # Connection configurations\n\u251c\u2500\u2500 models/                  # SQL models\n\u2502   \u2514\u2500\u2500 example/             # Example model\n\u251c\u2500\u2500 tests/                   # Tests\n\u251c\u2500\u2500 macros/                  # Macros\n\u251c\u2500\u2500 seeds/                   # Static data\n\u251c\u2500\u2500 snapshots/               # Snapshots\n\u251c\u2500\u2500 target/                  # Compiled files\n\u251c\u2500\u2500 logs/                    # Execution logs\n\u2514\u2500\u2500 README.md                # Project documentation\n</code></pre>"},{"location":"intro/first-project/#project-configuration","title":"\u2699\ufe0f Project Configuration","text":""},{"location":"intro/first-project/#1-dbt_projectyml","title":"1. dbt_project.yml","text":"<p>Edit the <code>dbt_project.yml</code> file:</p> <pre><code>name: 'jaffle_shop'\nversion: '1.0.0'\nconfig-version: 2\n\nprofile: 'jaffle_shop'\n\nmodel-paths: [\"models\"]\nanalysis-paths: [\"analyses\"]\ntest-paths: [\"tests\"]\nseed-paths: [\"seeds\"]\nmacro-paths: [\"macros\"]\nsnapshot-paths: [\"snapshots\"]\n\ntarget-path: \"target\"\nclean-targets:\n    - \"target\"\n    - \"dbt_packages\"\n\nmodels:\n  jaffle_shop:\n    staging:\n      +materialized: view\n    marts:\n      +materialized: table\n    analytics:\n      +materialized: table\n\nseeds:\n  jaffle_shop:\n    +column_types:\n      id: integer\n      customer_id: integer\n      order_id: integer\n      product_id: integer\n</code></pre>"},{"location":"intro/first-project/#2-profilesyml","title":"2. profiles.yml","text":"<p>Configure the database connection in <code>~/.dbt/profiles.yml</code>:</p> <pre><code>jaffle_shop:\n  target: dev\n  outputs:\n    dev:\n      type: sqlite\n      path: \"{{ env_var('DBT_SQLITE_PATH', '/tmp/jaffle_shop.db') }}\"\n      threads: 1\n</code></pre>"},{"location":"intro/first-project/#preparing-the-data","title":"\ud83d\uddc4\ufe0f Preparing the Data","text":""},{"location":"intro/first-project/#1-create-sqlite-database","title":"1. Create SQLite Database","text":"<pre><code># Create SQLite database\nsqlite3 /tmp/jaffle_shop.db\n\n# In SQLite shell, create tables\nCREATE TABLE raw_customers (\n    id INTEGER PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    email TEXT,\n    phone TEXT\n);\n\nCREATE TABLE raw_products (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    category TEXT,\n    price REAL\n);\n\nCREATE TABLE raw_orders (\n    id INTEGER PRIMARY KEY,\n    customer_id INTEGER,\n    order_date DATE,\n    status TEXT\n);\n\nCREATE TABLE raw_items (\n    id INTEGER PRIMARY KEY,\n    order_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    unit_price REAL\n);\n\n.exit\n</code></pre>"},{"location":"intro/first-project/#2-insert-sample-data","title":"2. Insert Sample Data","text":"<pre><code># Insert sample data\nsqlite3 /tmp/jaffle_shop.db &lt;&lt; EOF\nINSERT INTO raw_customers VALUES (1, 'John', 'Smith', 'john@email.com', '11999999999');\nINSERT INTO raw_customers VALUES (2, 'Mary', 'Johnson', 'mary@email.com', '11888888888');\nINSERT INTO raw_customers VALUES (3, 'Peter', 'Brown', 'peter@email.com', '11777777777');\n\nINSERT INTO raw_products VALUES (1, 'Laptop', 'Electronics', 2500.00);\nINSERT INTO raw_products VALUES (2, 'Mouse', 'Electronics', 50.00);\nINSERT INTO raw_products VALUES (3, 'Table', 'Furniture', 300.00);\n\nINSERT INTO raw_orders VALUES (1, 1, '2024-01-15', 'completed');\nINSERT INTO raw_orders VALUES (2, 2, '2024-01-16', 'pending');\nINSERT INTO raw_orders VALUES (3, 3, '2024-01-17', 'completed');\n\nINSERT INTO raw_items VALUES (1, 1, 1, 1, 2500.00);\nINSERT INTO raw_items VALUES (2, 1, 2, 2, 50.00);\nINSERT INTO raw_items VALUES (3, 2, 3, 1, 300.00);\nINSERT INTO raw_items VALUES (4, 3, 1, 1, 2500.00);\nEOF\n</code></pre>"},{"location":"intro/first-project/#creating-models","title":"\ud83c\udfd7\ufe0f Creating Models","text":""},{"location":"intro/first-project/#1-staging-model","title":"1. Staging Model","text":"<p>Create <code>models/staging/stg_customers.sql</code>:</p> <pre><code>{{\n  config(\n    materialized='view'\n  )\n}}\n\nSELECT\n    id,\n    first_name,\n    last_name,\n    email,\n    phone,\n    -- Clean and standardize data\n    TRIM(first_name) as first_name_clean,\n    TRIM(last_name) as last_name_clean,\n    LOWER(email) as email_clean,\n    -- Validate email\n    CASE \n        WHEN email LIKE '%@%' THEN 'valid'\n        ELSE 'invalid'\n    END as email_status\nFROM {{ source('raw', 'raw_customers') }}\n</code></pre>"},{"location":"intro/first-project/#2-mart-model","title":"2. Mart Model","text":"<p>Create <code>models/marts/customer_summary.sql</code>:</p> <pre><code>{{\n  config(\n    materialized='table'\n  )\n}}\n\nWITH customer_orders AS (\n    SELECT\n        c.id as customer_id,\n        c.first_name_clean,\n        c.last_name_clean,\n        c.email_clean,\n        COUNT(o.id) as total_orders,\n        SUM(CASE WHEN o.status = 'completed' THEN 1 ELSE 0 END) as completed_orders,\n        SUM(CASE WHEN o.status = 'pending' THEN 1 ELSE 0 END) as pending_orders\n    FROM {{ ref('stg_customers') }} c\n    LEFT JOIN {{ ref('stg_orders') }} o ON c.id = o.customer_id\n    GROUP BY 1, 2, 3, 4\n)\n\nSELECT\n    customer_id,\n    first_name_clean,\n    last_name_clean,\n    email_clean,\n    total_orders,\n    completed_orders,\n    pending_orders,\n    -- Calculate metrics\n    CASE \n        WHEN total_orders &gt; 0 THEN ROUND(completed_orders * 100.0 / total_orders, 2)\n        ELSE 0\n    END as completion_rate\nFROM customer_orders\n</code></pre>"},{"location":"intro/first-project/#running-the-project","title":"\ud83e\uddea Running the Project","text":""},{"location":"intro/first-project/#1-verify-configuration","title":"1. Verify Configuration","text":"<pre><code># Verify everything is configured\ndbt debug\n</code></pre>"},{"location":"intro/first-project/#2-run-models","title":"2. Run Models","text":"<pre><code># Run all models\ndbt run\n\n# Run only staging\ndbt run --select staging\n\n# Run only marts\ndbt run --select marts\n</code></pre>"},{"location":"intro/first-project/#3-run-tests","title":"3. Run Tests","text":"<pre><code># Run all tests\ndbt test\n\n# Run specific tests\ndbt test --select stg_customers\n</code></pre>"},{"location":"intro/first-project/#4-generate-documentation","title":"4. Generate Documentation","text":"<pre><code># Generate documentation\ndbt docs generate\n\n# Serve documentation locally\ndbt docs serve\n</code></pre>"},{"location":"intro/first-project/#checking-results","title":"\ud83d\udcca Checking Results","text":""},{"location":"intro/first-project/#1-query-models","title":"1. Query Models","text":"<pre><code># Check staging\nsqlite3 /tmp/jaffle_shop.db \"SELECT * FROM stg_customers;\"\n\n# Check marts\nsqlite3 /tmp/jaffle_shop.db \"SELECT * FROM customer_summary;\"\n</code></pre>"},{"location":"intro/first-project/#2-check-dag","title":"2. Check DAG","text":"<pre><code># Generate dependency graph\ndbt ls --select +customer_summary\n</code></pre>"},{"location":"intro/first-project/#congratulations","title":"\ud83c\udf89 Congratulations!","text":"<p>You've successfully created your first dbt project! \ud83c\udf8a</p>"},{"location":"intro/first-project/#next-steps","title":"\ud83d\udcda Next Steps","text":"<ol> <li>\u2705 First project created \u2190 You are here</li> <li>Explore Jaffle Shop</li> <li>Understand Staging Models</li> <li>Create Mart Models</li> </ol>"},{"location":"intro/first-project/#useful-commands","title":"\ud83d\udd0d Useful Commands","text":"<pre><code># Check model status\ndbt run --models staging\n\n# Run tests\ndbt test\n\n# Generate documentation\ndbt docs generate\n\n# Clean artifacts\ndbt clean\n\n# View logs\ndbt run --log-level debug\n</code></pre> <p>Is your first dbt project working? \ud83d\ude80</p> <p>Let's explore the Jaffle Shop project in detail!</p>"},{"location":"intro/setup/","title":"\ud83d\udee0\ufe0f Environment Setup","text":"<p>In this section, you'll learn how to set up your development environment to work with dbt.</p>"},{"location":"intro/setup/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>Before starting, make sure you have installed:</p> <ul> <li>Python 3.8+ - Download Python</li> <li>Git - Download Git</li> <li>Code editor - We recommend VS Code or PyCharm</li> </ul>"},{"location":"intro/setup/#python-installation","title":"\ud83d\udc0d Python Installation","text":""},{"location":"intro/setup/#windows","title":"Windows","text":"<pre><code># Download the installer from Python.org\n# Run the installer and check \"Add Python to PATH\"\n</code></pre>"},{"location":"intro/setup/#macos","title":"macOS","text":"<pre><code># Using Homebrew\nbrew install python\n\n# Or download the installer from Python.org\n</code></pre>"},{"location":"intro/setup/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian)","text":"<pre><code>sudo apt update\nsudo apt install python3 python3-pip\n</code></pre>"},{"location":"intro/setup/#dbt-installation","title":"\ud83d\udd27 dbt Installation","text":""},{"location":"intro/setup/#1-create-virtual-environment","title":"1. Create Virtual Environment","text":"<pre><code># Create project directory\nmkdir dbt_course\ncd dbt_course\n\n# Create virtual environment\npython -m venv venv\n\n# Activate virtual environment\n# Windows\nvenv\\Scripts\\activate\n\n# macOS/Linux\nsource venv/bin/activate\n</code></pre>"},{"location":"intro/setup/#2-install-dbt","title":"2. Install dbt","text":"<pre><code># Install dbt Core\npip install dbt-core\n\n# Install adapter for your database\n# For SQLite (used in this course)\npip install dbt-sqlite\n\n# For PostgreSQL\npip install dbt-postgres\n\n# For BigQuery\npip install dbt-bigquery\n\n# For Snowflake\npip install dbt-snowflake\n</code></pre>"},{"location":"intro/setup/#3-verify-installation","title":"3. Verify Installation","text":"<pre><code>dbt --version\n</code></pre>"},{"location":"intro/setup/#database-configuration","title":"\ud83d\uddc4\ufe0f Database Configuration","text":""},{"location":"intro/setup/#sqlite-recommended-for-beginners","title":"SQLite (Recommended for Beginners)","text":"<p>SQLite is perfect for learning dbt as it doesn't require server configuration:</p> <pre><code># Install SQLite (if not installed)\n# macOS\nbrew install sqlite\n\n# Ubuntu/Debian\nsudo apt install sqlite3\n</code></pre>"},{"location":"intro/setup/#postgresql-production","title":"PostgreSQL (Production)","text":"<pre><code># Install PostgreSQL\n# macOS\nbrew install postgresql\n\n# Ubuntu/Debian\nsudo apt install postgresql postgresql-contrib\n\n# Start service\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n</code></pre>"},{"location":"intro/setup/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<p>After installation, you'll have a structure like this:</p> <pre><code>dbt_course/\n\u251c\u2500\u2500 dbt_project.yml          # Main configuration\n\u251c\u2500\u2500 profiles.yml             # Connection configurations\n\u251c\u2500\u2500 models/                  # SQL models\n\u2502   \u251c\u2500\u2500 staging/            # Staging models\n\u2502   \u251c\u2500\u2500 marts/              # Mart models\n\u2502   \u2514\u2500\u2500 analytics/          # Analytical models\n\u251c\u2500\u2500 tests/                   # Custom tests\n\u251c\u2500\u2500 macros/                  # Reusable macros\n\u251c\u2500\u2500 seeds/                   # Static data\n\u2514\u2500\u2500 docs/                    # Documentation\n</code></pre>"},{"location":"intro/setup/#profile-configuration","title":"\ud83d\udd10 Profile Configuration","text":"<p>Create the file <code>~/.dbt/profiles.yml</code>:</p> <pre><code># For SQLite\njaffle_shop:\n  target: dev\n  outputs:\n    dev:\n      type: sqlite\n      path: \"{{ env_var('DBT_SQLITE_PATH', '/tmp/jaffle_shop.db') }}\"\n      threads: 1\n\n# For PostgreSQL\njaffle_shop:\n  target: dev\n  outputs:\n    dev:\n      type: postgres\n      host: localhost\n      user: \"{{ env_var('DBT_USER') }}\"\n      password: \"{{ env_var('DBT_PASS') }}\"\n      port: 5432\n      dbname: jaffle_shop\n      schema: public\n      threads: 4\n</code></pre>"},{"location":"intro/setup/#first-project","title":"\ud83d\ude80 First Project","text":"<p>Now you're ready to create your first dbt project! Go to the next section:</p> <p>Project Setup</p>"},{"location":"intro/setup/#installation-verification","title":"\ud83d\udd0d Installation Verification","text":"<p>Run these commands to verify everything is working:</p> <pre><code># Check dbt version\ndbt --version\n\n# Check if adapter is installed\ndbt debug\n\n# Create test project\ndbt init test_project\ncd test_project\ndbt run\n</code></pre>"},{"location":"intro/setup/#troubleshooting","title":"\ud83c\udd98 Troubleshooting","text":""},{"location":"intro/setup/#error-dbt-command-not-found","title":"Error: \"dbt command not found\"","text":"<ul> <li>Check if virtual environment is activated</li> <li>Verify dbt was installed correctly</li> </ul>"},{"location":"intro/setup/#database-connection-error","title":"Database Connection Error","text":"<ul> <li>Check configurations in <code>profiles.yml</code></li> <li>Test connection manually</li> <li>Verify database is running</li> </ul>"},{"location":"intro/setup/#dependency-error","title":"Dependency Error","text":"<pre><code>pip install --upgrade pip\npip install -r requirements.txt\n</code></pre>"},{"location":"intro/setup/#next-steps","title":"\ud83d\udcda Next Steps","text":"<ol> <li>\u2705 Environment configured \u2190 You are here</li> <li>Setup Project</li> <li>Explore Jaffle Shop</li> </ol> <p>Is your environment configured? \ud83c\udfaf</p> <p>Let's go to the next step: project setup!</p>"},{"location":"intro/what-is-dbt/","title":"\ud83e\udd14 What is dbt?","text":"<p>dbt (data build tool) is a modern data engineering tool that enables data analysts and engineers to transform data in their warehouse more effectively.</p>"},{"location":"intro/what-is-dbt/#what-dbt-does","title":"\ud83c\udfaf What dbt Does","text":"<p>dbt is a transformation tool that sits between your data warehouse and your analytics tools. It allows you to:</p> <ul> <li>Transform raw data into clean, structured datasets</li> <li>Build data models using SQL</li> <li>Test data quality automatically</li> <li>Document your data comprehensively</li> <li>Version control your data transformations</li> <li>Collaborate with team members</li> </ul>"},{"location":"intro/what-is-dbt/#how-dbt-works","title":"\ud83c\udfd7\ufe0f How dbt Works","text":""},{"location":"intro/what-is-dbt/#1-extract-load-not-dbts-job","title":"1. Extract &amp; Load (Not dbt's job)","text":"<ul> <li>Data is extracted from source systems</li> <li>Loaded into your data warehouse (Snowflake, BigQuery, Redshift, etc.)</li> </ul>"},{"location":"intro/what-is-dbt/#2-transform-dbts-specialty","title":"2. Transform (dbt's specialty)","text":"<ul> <li>Raw data is transformed into clean, business-ready datasets</li> <li>Transformations are written in SQL</li> <li>dbt compiles and runs these transformations</li> </ul>"},{"location":"intro/what-is-dbt/#3-serve-analytics-tools","title":"3. Serve (Analytics tools)","text":"<ul> <li>Clean data is served to BI tools, notebooks, and applications</li> </ul>"},{"location":"intro/what-is-dbt/#key-concepts","title":"\ud83d\udd11 Key Concepts","text":""},{"location":"intro/what-is-dbt/#models","title":"Models","text":"<p>SQL files that define transformations: <pre><code>-- models/staging/stg_customers.sql\nSELECT\n    id,\n    first_name,\n    last_name,\n    email,\n    created_at\nFROM {{ source('raw', 'customers') }}\nWHERE email IS NOT NULL\n</code></pre></p>"},{"location":"intro/what-is-dbt/#sources","title":"Sources","text":"<p>References to raw data tables: <pre><code># models/sources.yml\nsources:\n  - name: raw\n    database: analytics\n    schema: raw_data\n    tables:\n      - name: customers\n      - name: orders\n</code></pre></p>"},{"location":"intro/what-is-dbt/#tests","title":"Tests","text":"<p>Data quality checks: <pre><code># models/schema.yml\nmodels:\n  - name: stg_customers\n    columns:\n      - name: id\n        tests:\n          - unique\n          - not_null\n      - name: email\n        tests:\n          - not_null\n          - unique\n</code></pre></p>"},{"location":"intro/what-is-dbt/#macros","title":"Macros","text":"<p>Reusable SQL code: <pre><code>-- macros/clean_phone.sql\n{% macro clean_phone(phone_column) %}\n    REGEXP_REPLACE({{ phone_column }}, '[^0-9]', '')\n{% endmacro %}\n</code></pre></p>"},{"location":"intro/what-is-dbt/#why-use-dbt","title":"\ud83c\udfea Why Use dbt?","text":""},{"location":"intro/what-is-dbt/#for-data-analysts","title":"For Data Analysts","text":"<ul> <li>SQL-first: Write transformations in familiar SQL</li> <li>Version control: Track changes to your data models</li> <li>Documentation: Auto-generate documentation</li> <li>Testing: Ensure data quality automatically</li> </ul>"},{"location":"intro/what-is-dbt/#for-data-engineers","title":"For Data Engineers","text":"<ul> <li>Modularity: Build reusable, maintainable models</li> <li>Dependencies: Manage complex data pipelines</li> <li>CI/CD: Integrate with modern development practices</li> <li>Scalability: Handle large datasets efficiently</li> </ul>"},{"location":"intro/what-is-dbt/#for-organizations","title":"For Organizations","text":"<ul> <li>Collaboration: Multiple team members can work together</li> <li>Standards: Enforce consistent naming and patterns</li> <li>Governance: Track data lineage and usage</li> <li>Efficiency: Reduce time spent on data preparation</li> </ul>"},{"location":"intro/what-is-dbt/#dbt-vs-traditional-etl","title":"\ud83d\ude80 dbt vs. Traditional ETL","text":"Traditional ETL dbt GUI-based tools Code-based Limited testing Comprehensive testing Hard to version control Git integration Difficult collaboration Team-friendly Vendor lock-in Database agnostic"},{"location":"intro/what-is-dbt/#dbt-flavors","title":"\ud83d\udd27 dbt Flavors","text":""},{"location":"intro/what-is-dbt/#dbt-core-open-source","title":"dbt Core (Open Source)","text":"<ul> <li>Free and open source</li> <li>Command-line interface</li> <li>Self-hosted</li> <li>Full functionality</li> </ul>"},{"location":"intro/what-is-dbt/#dbt-cloud-hosted","title":"dbt Cloud (Hosted)","text":"<ul> <li>Managed service by dbt Labs</li> <li>Web-based interface</li> <li>Built-in scheduling</li> <li>Team collaboration features</li> </ul>"},{"location":"intro/what-is-dbt/#real-world-example","title":"\ud83d\udcca Real-World Example","text":"<p>Here's how dbt transforms raw e-commerce data:</p> <pre><code>graph LR\n    A[Raw Orders] --&gt; B[stg_orders]\n    C[Raw Customers] --&gt; D[stg_customers]\n    E[Raw Products] --&gt; F[stg_products]\n\n    B --&gt; G[dim_customers]\n    D --&gt; G\n    F --&gt; H[dim_products]\n\n    B --&gt; I[fct_orders]\n    G --&gt; I\n    H --&gt; I\n\n    I --&gt; J[analytics_dashboard]</code></pre>"},{"location":"intro/what-is-dbt/#when-to-use-dbt","title":"\ud83c\udfaf When to Use dbt","text":""},{"location":"intro/what-is-dbt/#great-for","title":"\u2705 Great for:","text":"<ul> <li>Data warehousing projects</li> <li>Analytics engineering</li> <li>Data transformation pipelines</li> <li>Team collaboration on data</li> <li>SQL-based transformations</li> </ul>"},{"location":"intro/what-is-dbt/#not-ideal-for","title":"\u274c Not ideal for:","text":"<ul> <li>Real-time streaming data</li> <li>Complex data processing (use Spark/Flink)</li> <li>Non-SQL transformations</li> <li>Simple one-off data cleaning</li> </ul>"},{"location":"intro/what-is-dbt/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Ready to start with dbt? Here's your path:</p> <ol> <li>Learn the basics: Environment Setup</li> <li>Setup the project: Project Setup</li> <li>Build real models: Jaffle Shop Project</li> <li>Master advanced concepts: Advanced Concepts</li> </ol>"},{"location":"intro/what-is-dbt/#learn-more","title":"\ud83d\udd17 Learn More","text":"<ul> <li>Official dbt Documentation</li> <li>dbt Community</li> <li>dbt Blog</li> <li>dbt YouTube Channel</li> </ul> <p>dbt is transforming how organizations work with data. \ud83d\ude80</p> <p>Ready to join the revolution? Start with environment setup!</p>"},{"location":"jaffle-shop/overview/","title":"\ud83c\udfea Project Overview","text":"<p>The Jaffle Shop is a fictional e-commerce company that serves as the perfect learning environment for dbt. This project simulates real-world data scenarios you'll encounter in actual business environments.</p>"},{"location":"jaffle-shop/overview/#project-goals","title":"\ud83c\udfaf Project Goals","text":"<ul> <li>Learn dbt fundamentals through hands-on practice</li> <li>Understand data modeling patterns and best practices</li> <li>Build real data pipelines from raw data to analytics</li> <li>Practice testing and documentation techniques</li> <li>Experience team collaboration workflows</li> </ul>"},{"location":"jaffle-shop/overview/#business-context","title":"\ud83c\udfd7\ufe0f Business Context","text":""},{"location":"jaffle-shop/overview/#company-profile","title":"Company Profile","text":"<ul> <li>Industry: E-commerce / Online Retail</li> <li>Products: Various consumer goods (electronics, furniture, clothing)</li> <li>Customers: Individual consumers and small businesses</li> <li>Sales Channels: Online store, mobile app, third-party marketplaces</li> </ul>"},{"location":"jaffle-shop/overview/#key-business-metrics","title":"Key Business Metrics","text":"<ul> <li>Customer acquisition and retention</li> <li>Product performance and inventory</li> <li>Order fulfillment and customer satisfaction</li> <li>Revenue growth and profitability</li> <li>Marketing campaign effectiveness</li> </ul>"},{"location":"jaffle-shop/overview/#data-architecture","title":"\ud83d\udcca Data Architecture","text":""},{"location":"jaffle-shop/overview/#data-sources","title":"Data Sources","text":"<pre><code>graph TD\n    A[Website Analytics] --&gt; D[Data Warehouse]\n    B[Order Management] --&gt; D\n    C[Customer Database] --&gt; D\n    E[Inventory System] --&gt; D\n    F[Payment Processing] --&gt; D\n\n    D --&gt; G[dbt Transformations]\n    G --&gt; H[Analytics Layer]\n    H --&gt; I[BI Dashboards]\n    H --&gt; J[Reports]\n    H --&gt; K[Data Science]</code></pre>"},{"location":"jaffle-shop/overview/#data-flow","title":"Data Flow","text":"<ol> <li>Raw Data: Extracted from source systems</li> <li>Staging: Cleaned and standardized</li> <li>Marts: Business-ready datasets</li> <li>Analytics: Aggregated metrics and KPIs</li> </ol>"},{"location":"jaffle-shop/overview/#data-models","title":"\ud83d\uddc4\ufe0f Data Models","text":""},{"location":"jaffle-shop/overview/#staging-layer-staging","title":"Staging Layer (<code>staging/</code>)","text":"<p>Raw data that has been cleaned and standardized:</p> <ul> <li><code>stg_customers</code>: Customer information with data quality checks</li> <li><code>stg_orders</code>: Order details with validation</li> <li><code>stg_products</code>: Product catalog with categorization</li> <li><code>stg_items</code>: Order line items with pricing</li> </ul>"},{"location":"jaffle-shop/overview/#marts-layer-marts","title":"Marts Layer (<code>marts/</code>)","text":"<p>Business-ready datasets for specific domains:</p> <ul> <li><code>daily_sales_summary</code>: Daily sales performance metrics</li> <li><code>duplicate_customers</code>: Analysis of potential duplicate customer records</li> </ul>"},{"location":"jaffle-shop/overview/#analytics-layer-analytics","title":"Analytics Layer (<code>analytics/</code>)","text":"<p>Aggregated metrics and business KPIs:</p> <ul> <li><code>dim_customers</code>: Customer dimension table with aggregated metrics</li> <li><code>fct_orders</code>: Order fact table with business logic and data quality checks</li> </ul>"},{"location":"jaffle-shop/overview/#technical-implementation","title":"\ud83d\udd27 Technical Implementation","text":""},{"location":"jaffle-shop/overview/#database","title":"Database","text":"<ul> <li>Primary: SQLite (for learning)</li> <li>Production: PostgreSQL, Snowflake, or BigQuery</li> <li>Schema: Normalized design with proper relationships</li> </ul>"},{"location":"jaffle-shop/overview/#dbt-configuration","title":"dbt Configuration","text":"<pre><code># dbt_project.yml\nmodels:\n  jaffle_shop:\n    staging:\n      +materialized: view\n      +schema: staging\n    marts:\n      +materialized: table\n      +schema: marts\n    analytics:\n      +materialized: table\n      +schema: analytics\n</code></pre>"},{"location":"jaffle-shop/overview/#data-quality","title":"Data Quality","text":"<ul> <li>Generic tests: uniqueness, not null, relationships</li> <li>Custom tests: business logic validation</li> <li>Data profiling: automatic documentation</li> <li>Monitoring: alerting on data issues</li> </ul>"},{"location":"jaffle-shop/overview/#learning-path","title":"\ud83d\udcda Learning Path","text":""},{"location":"jaffle-shop/overview/#beginner-level","title":"Beginner Level","text":"<ol> <li>Setup: Install dbt and configure environment</li> <li>Staging Models: Clean and validate raw data</li> <li>Basic Tests: Ensure data quality</li> <li>Documentation: Document your models</li> </ol>"},{"location":"jaffle-shop/overview/#intermediate-level","title":"Intermediate Level","text":"<ol> <li>Mart Models: Build business-ready datasets</li> <li>Advanced Tests: Custom validation logic</li> <li>Macros: Reusable transformation code</li> <li>Dependencies: Manage model relationships</li> </ol>"},{"location":"jaffle-shop/overview/#advanced-level","title":"Advanced Level","text":"<ol> <li>Analytics Models: Complex business metrics</li> <li>Performance: Optimize query performance</li> <li>Monitoring: Production data quality</li> </ol>"},{"location":"jaffle-shop/overview/#project-deliverables","title":"\ud83c\udfaf Project Deliverables","text":""},{"location":"jaffle-shop/overview/#code-artifacts","title":"Code Artifacts","text":"<ul> <li>Complete dbt project structure</li> <li>All transformation models</li> <li>Comprehensive test suite</li> <li>Documentation and schemas</li> </ul>"},{"location":"jaffle-shop/overview/#business-insights","title":"Business Insights","text":"<ul> <li>Customer behavior analysis</li> <li>Product performance metrics</li> <li>Operational efficiency data</li> <li>Revenue and growth analytics</li> </ul>"},{"location":"jaffle-shop/overview/#technical-skills","title":"Technical Skills","text":"<ul> <li>dbt project management</li> <li>SQL transformation expertise</li> <li>Data modeling best practices</li> <li>Testing and documentation</li> </ul>"},{"location":"jaffle-shop/overview/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Ready to dive into the Jaffle Shop project?</p> <ol> <li>Project Setup: Project Setup</li> <li>What is dbt: Introduction to dbt</li> </ol>"},{"location":"jaffle-shop/overview/#project-files","title":"\ud83d\udd0d Project Files","text":"<p>The complete project structure includes:</p> <pre><code>jaffle_shop/\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2502   \u251c\u2500\u2500 stg_customers.sql\n\u2502   \u2502   \u251c\u2500\u2500 stg_orders.sql\n\u2502   \u2502   \u251c\u2500\u2500 stg_products.sql\n\u2502   \u2502   \u251c\u2500\u2500 stg_items.sql\n\u2502   \u2502   \u2514\u2500\u2500 staging.yml\n\u2502   \u251c\u2500\u2500 marts/\n\u2502   \u2502   \u251c\u2500\u2500 daily_sales_summary.sql\n\u2502   \u2502   \u251c\u2500\u2500 duplicate_customers.sql\n\u2502   \u2502   \u2514\u2500\u2500 marts.yml\n\u2502   \u2514\u2500\u2500 analytics/\n\u2502       \u251c\u2500\u2500 dim_customers.sql\n\u2502       \u251c\u2500\u2500 fct_orders.sql\n\u2502       \u2514\u2500\u2500 analytics.yml\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 macros/\n\u251c\u2500\u2500 seeds/\n\u2514\u2500\u2500 snapshots/\n</code></pre>"},{"location":"jaffle-shop/overview/#success-metrics","title":"\ud83c\udf1f Success Metrics","text":"<p>You'll know you've mastered this project when you can:</p> <ul> <li>\u2705 Build models that transform raw data into insights</li> <li>\u2705 Write tests that catch data quality issues</li> <li>\u2705 Document models that others can understand</li> <li>\u2705 Collaborate with team members effectively</li> <li>\u2705 Deploy changes safely and reliably</li> </ul> <p>Ready to start building? Let's begin with project setup!</p>"},{"location":"jaffle-shop/project-setup/","title":"\ud83d\ude80 Jaffle Shop Project Setup","text":"<p>This comprehensive guide will help you set up and run the dbt Jaffle Shop project from scratch.</p>"},{"location":"jaffle-shop/project-setup/#prerequisites","title":"\ud83d\udccb Prerequisites","text":""},{"location":"jaffle-shop/project-setup/#required-software","title":"Required Software:","text":"<ul> <li>Python 3.8+ - Download here</li> <li>Git - Download here</li> <li>Code editor (recommended: VS Code or Cursor)</li> </ul>"},{"location":"jaffle-shop/project-setup/#recommended-knowledge","title":"Recommended Knowledge:","text":"<ul> <li>Basic SQL</li> <li>Data warehousing concepts</li> <li>Basic command line</li> </ul>"},{"location":"jaffle-shop/project-setup/#project-architecture","title":"\ud83c\udfd7\ufe0f Project Architecture","text":"<p>The Jaffle Shop project uses a typical layered architecture for dbt projects:</p> <pre><code>graph TD\n    A[CSV Seeds] --&gt; B[Staging Models]\n    B --&gt; C[Marts Models]\n    B --&gt; D[Analytics Models]\n\n    E[SQLite Database] --&gt; F[dbt Transformations]\n    F --&gt; G[Business Intelligence]\n\n    H[Data Tests] --&gt; I[Data Quality]\n    J[Documentation] --&gt; K[Data Catalog]</code></pre>"},{"location":"jaffle-shop/project-setup/#directory-structure","title":"Directory Structure:","text":"<pre><code>jaffle_shop/\n\u251c\u2500\u2500 models/                    # dbt Models\n\u2502   \u251c\u2500\u2500 staging/              # Clean and standardized data\n\u2502   \u2502   \u251c\u2500\u2500 stg_customers.sql\n\u2502   \u2502   \u251c\u2500\u2500 stg_orders.sql\n\u2502   \u2502   \u251c\u2500\u2500 stg_products.sql\n\u2502   \u2502   \u251c\u2500\u2500 stg_items.sql\n\u2502   \u2502   \u2514\u2500\u2500 staging.yml       # Tests and documentation\n\u2502   \u251c\u2500\u2500 marts/                # Business-ready datasets\n\u2502   \u2502   \u251c\u2500\u2500 daily_sales_summary.sql\n\u2502   \u2502   \u251c\u2500\u2500 duplicate_customers.sql\n\u2502   \u2502   \u2514\u2500\u2500 marts.yml\n\u2502   \u2514\u2500\u2500 analytics/            # Aggregated metrics and KPIs\n\u2502       \u251c\u2500\u2500 dim_customers.sql\n\u2502       \u251c\u2500\u2500 fct_orders.sql\n\u2502       \u2514\u2500\u2500 analytics.yml\n\u251c\u2500\u2500 seeds/                    # Input data (CSV)\n\u2502   \u2514\u2500\u2500 jaffle-data/\n\u2502       \u251c\u2500\u2500 raw_customers.csv\n\u2502       \u251c\u2500\u2500 raw_orders.csv\n\u2502       \u251c\u2500\u2500 raw_products.csv\n\u2502       \u2514\u2500\u2500 raw_items.csv\n\u251c\u2500\u2500 tests/                    # Custom tests\n\u2502   \u251c\u2500\u2500 generic/             # Reusable tests\n\u2502   \u2514\u2500\u2500 singular/            # Specific tests\n\u251c\u2500\u2500 macros/                   # Reusable SQL code\n\u251c\u2500\u2500 snapshots/               # Data version control\n\u251c\u2500\u2500 dbt_project.yml          # Project configuration\n\u2514\u2500\u2500 profiles.yml             # Connection configuration\n</code></pre>"},{"location":"jaffle-shop/project-setup/#step-by-step-setup","title":"\u2699\ufe0f Step-by-Step Setup","text":""},{"location":"jaffle-shop/project-setup/#1-clone-repository","title":"1. Clone Repository","text":"<pre><code># Clone the repository\ngit clone https://github.com/tjsoliveira/dbt_course.git\ncd dbt_course\n</code></pre>"},{"location":"jaffle-shop/project-setup/#2-python-environment-setup","title":"2. Python Environment Setup","text":"<pre><code># Create virtual environment\npython -m venv venv\n\n# Activate virtual environment\n# On macOS/Linux:\nsource venv/bin/activate\n# On Windows:\nvenv\\Scripts\\activate\n\n# Install dependencies from requirements file\npip install -r requirements.txt\n\n# The requirements.txt file includes:\n# - dbt-core==1.10.9 (dbt main engine)\n# - dbt-sqlite==1.10.0 (SQLite adapter)\n# - faker&gt;=20.0.0 (data generation for tests)\n</code></pre>"},{"location":"jaffle-shop/project-setup/#3-navigate-to-project-and-install-dependencies","title":"3. Navigate to Project and Install Dependencies","text":"<pre><code># Enter the dbt project directory\ncd jaffle_shop\n\n# Install dbt packages\ndbt deps\n\n# This will install:\n# - dbt_utils (essential utilities)\n# - Other dependencies listed in packages.yml\n</code></pre>"},{"location":"jaffle-shop/project-setup/#4-profile-configuration","title":"4. Profile Configuration","text":"<p>The <code>profiles.yml</code> file is already configured for SQLite:</p> <pre><code>jaffle_shop:\n  target: dev\n  outputs:\n    dev:\n      type: sqlite\n      threads: 1\n      database: 'jaffle_shop'\n      schema: 'main'\n      schemas_and_paths:\n        main: './jaffle_shop/db/jaffle_shop.db'\n      schema_directory: 'jaffle_shop'\n</code></pre>"},{"location":"jaffle-shop/project-setup/#5-configuration-verification","title":"5. Configuration Verification","text":"<pre><code># Test connection\ndbt debug\n\n# Expected result: \u2705 All checks passed!\n</code></pre>"},{"location":"jaffle-shop/project-setup/#complete-project-initialization","title":"\ud83d\udcca Complete Project Initialization","text":""},{"location":"jaffle-shop/project-setup/#automatic-initialization-script","title":"Automatic Initialization Script \ud83d\ude80","text":"<p>The project includes a script that automates the entire initialization:</p> <pre><code># Run initialization script (from dbt_course root directory)\n./init_project.sh\n\n# This script automatically:\n# 1. \ud83d\udc0d Checks Python dependencies (faker, etc.)\n# 2. \ud83d\udcca Generates custom CSV data with quality issues\n# 3. \ud83c\udf31 Runs dbt seed to load into database\n# 4. \u2705 Confirms successful operation\n</code></pre>"},{"location":"jaffle-shop/project-setup/#what-the-script-generates","title":"What the Script Generates:","text":"<ul> <li>raw_customers.csv: ~1000 customers with email/phone issues</li> <li>raw_orders.csv: ~800 orders with date/amount issues</li> <li>raw_products.csv: ~200 products with price issues</li> <li>raw_items.csv: ~1500 items with quantity/price issues</li> </ul>"},{"location":"jaffle-shop/project-setup/#manual-initialization-alternative","title":"Manual Initialization (Alternative)","text":"<p>If you prefer step-by-step:</p> <pre><code># 1. Generate custom data\npython3 scripts/generate_all_data.py\n\n# 2. Load data into database, build models and run tests\ncd jaffle_shop\ndbt build\n</code></pre>"},{"location":"jaffle-shop/project-setup/#models-created","title":"Models Created:","text":"<p>After initialization, you'll have:</p> <ul> <li> <p>Staging Layer (Clean and standardized data):</p> <ul> <li><code>stg_customers</code> - Customer information with data quality checks</li> <li><code>stg_orders</code> - Order details with validation</li> <li><code>stg_products</code> - Product catalog with categorization</li> <li><code>stg_items</code> - Order line items with pricing</li> </ul> </li> <li> <p>Marts Layer (Business-ready datasets):</p> <ul> <li><code>daily_sales_summary</code> - Daily sales performance metrics</li> <li><code>duplicate_customers</code> - Analysis of potential duplicate customer records</li> </ul> </li> <li> <p>Analytics Layer (Aggregated metrics and KPIs):</p> <ul> <li><code>dim_customers</code> - Customer dimension table with aggregated metrics</li> <li><code>fct_orders</code> - Order fact table with business logic and data quality checks</li> </ul> </li> </ul>"},{"location":"jaffle-shop/project-setup/#data-quality-testing","title":"\ud83e\uddea Data Quality Testing","text":"<p>The project includes a comprehensive testing system to ensure data quality:</p>"},{"location":"jaffle-shop/project-setup/#available-test-types","title":"Available Test Types:","text":""},{"location":"jaffle-shop/project-setup/#1-native-dbt-tests","title":"1. Native dbt Tests","text":"<pre><code># Run all tests\ndbt test\n\n# Tests include:\n# - Uniqueness (unique)\n# - Not null (not_null)\n# - Relationships (relationships)\n# - Accepted values (accepted_values)\n</code></pre>"},{"location":"jaffle-shop/project-setup/#2-relationship-tests","title":"2. Relationship Tests","text":"<p>Verify referential integrity between tables:</p> <ul> <li> <p>Items to Orders Relationship:</p> <ul> <li><code>stg_items.order_id</code> \u2192 <code>stg_orders.order_id</code></li> <li>Ensures all order items have valid parent orders</li> </ul> </li> <li> <p>Items to Products Relationship:</p> <ul> <li><code>stg_items.product_id</code> \u2192 <code>stg_products.product_id</code></li> <li>Ensures all order items reference existing products</li> </ul> </li> <li> <p>Orders to Customers Relationship:</p> <ul> <li><code>stg_orders.customer_id</code> \u2192 <code>stg_customers.customer_id</code></li> <li>Ensures all orders belong to valid customers</li> </ul> </li> <li> <p>Analytics to Staging Relationship:</p> <ul> <li><code>fct_orders.customer_id</code> \u2192 <code>stg_customers.customer_id</code></li> <li>Maintains referential integrity in analytics layer</li> </ul> </li> </ul>"},{"location":"jaffle-shop/project-setup/#3-custom-generic-tests","title":"3. Custom Generic Tests","text":"<p>Location: <code>tests/generic/</code></p> <ul> <li> <p>Order Amount Problems:</p> <ul> <li><code>test_negative_amount</code> - Tests for negative values in numeric columns</li> <li><code>test_zero_amount</code> - Tests for zero values in numeric columns</li> <li><code>test_suspiciously_high</code> - Tests for values above a threshold (default: 10,000)</li> </ul> </li> <li> <p>Date Problems:</p> <ul> <li><code>test_missing_date</code> - Tests for NULL values in date columns</li> <li><code>test_future_date</code> - Tests for dates in the future</li> </ul> </li> <li> <p>Status Problems:</p> <ul> <li><code>test_missing_status</code> - Tests for NULL values in status columns</li> </ul> </li> <li> <p>Customer Data Problems:</p> <ul> <li><code>test_invalid_customer_email</code> - Tests for all email problems (missing @, no domain, empty, etc.)</li> <li><code>test_invalid_customer_phone</code> - Tests for all phone problems (too short, too long, letters, etc.)</li> </ul> </li> <li> <p>Product Problems:</p> <ul> <li><code>test_invalid_product_price</code> - Tests for all price problems (missing, negative, zero, extremely high)</li> </ul> </li> </ul>"},{"location":"jaffle-shop/project-setup/#running-specific-tests","title":"Running Specific Tests:","text":"<pre><code># Tests by category\ndbt test --select relationships     # Only relationships\ndbt test --select generic          # Only generic tests\ndbt test --select singular         # Only custom tests\n\n# Tests by model\ndbt test --select stg_customers     # Only staging customers\ndbt test --select marts            # Only marts layer\n\n# Specific test\ndbt test --select test_negative_amount\n</code></pre>"},{"location":"jaffle-shop/project-setup/#documentation","title":"\ud83d\udcda Documentation","text":""},{"location":"jaffle-shop/project-setup/#generate-documentation","title":"Generate Documentation","text":"<pre><code># Generate interactive documentation\ndbt docs generate\n\n# Serve documentation locally\ndbt docs serve\n\n# Access: http://localhost:8080\n</code></pre>"},{"location":"jaffle-shop/project-setup/#documentation-features","title":"Documentation Features:","text":"<ul> <li>Data lineage: Visualize dependencies between models</li> <li>Data catalog: Explore schemas and columns</li> <li>Detailed descriptions: Understand each field</li> <li>Statistics: View data profiles</li> </ul>"},{"location":"jaffle-shop/project-setup/#essential-commands","title":"\ud83d\ude80 Essential Commands","text":""},{"location":"jaffle-shop/project-setup/#daily-development","title":"Daily Development:","text":"<pre><code># Complete workflow (seed + run + test in one command)\ndbt build\n\n# Incremental development\ndbt run --select +stg_customers+   # Model and dependencies\ndbt run --models staging          # Only staging layer\ndbt run --exclude analytics       # Everything except analytics\n</code></pre>"},{"location":"jaffle-shop/project-setup/#debugging","title":"Debugging:","text":"<pre><code># Compile without executing\ndbt compile\n\n# Run with verbose logs\ndbt run --debug\n\n# Test specific model\ndbt run --select stg_customers --full-refresh\n</code></pre>"},{"location":"jaffle-shop/project-setup/#cleanup","title":"Cleanup:","text":"<pre><code># Clean cache\ndbt clean\n\n# Recreate everything from scratch\ndbt seed --full-refresh &amp;&amp; dbt run --full-refresh\n</code></pre>"},{"location":"jaffle-shop/project-setup/#learning-scenarios","title":"\ud83c\udfaf Learning Scenarios","text":""},{"location":"jaffle-shop/project-setup/#1-for-beginners","title":"1. For Beginners:","text":"<ol> <li>Complete setup following this guide</li> <li>Explore generated documentation with dbt</li> <li>Run simple tests in <code>tests/singular/</code></li> <li>Modify queries and see the impact</li> </ol>"},{"location":"jaffle-shop/project-setup/#2-for-intermediates","title":"2. For Intermediates:","text":"<ol> <li>Create new generic tests for custom validations</li> <li>Implement new models in analytics layer</li> <li>Configure macros for code reuse</li> <li>Optimize model performance</li> </ol>"},{"location":"jaffle-shop/project-setup/#3-for-advanced","title":"3. For Advanced:","text":"<ol> <li>Configure CI/CD with GitHub Actions</li> <li>Implement snapshots for version control</li> <li>Integrate with BI tools (Tableau, Power BI)</li> <li>Configure alerts for test failures</li> </ol>"},{"location":"jaffle-shop/project-setup/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"jaffle-shop/project-setup/#common-issues","title":"Common Issues:","text":""},{"location":"jaffle-shop/project-setup/#database-not-found","title":"\"Database not found\"","text":"<pre><code># Solution: Recreate seeds\ndbt seed --full-refresh\n</code></pre>"},{"location":"jaffle-shop/project-setup/#model-not-found","title":"\"Model not found\"","text":"<pre><code># Solution: Check dependencies\ndbt compile\ndbt run --select +problem_model\n</code></pre>"},{"location":"jaffle-shop/project-setup/#tests-failing","title":"\"Tests failing\"","text":"<pre><code># Investigate specific failures\ndbt test --select test_that_failed --store-failures\n</code></pre>"},{"location":"jaffle-shop/project-setup/#slow-performance","title":"\"Slow performance\"","text":"<pre><code># Use parallel execution\ndbt run --threads 4\n</code></pre>"},{"location":"jaffle-shop/project-setup/#next-steps","title":"\ud83d\udcde Next Steps","text":""},{"location":"jaffle-shop/project-setup/#after-setup","title":"After Setup:","text":"<ol> <li>Explore the data: Run queries on created models</li> <li>Understand tests: See how they work in practice</li> <li>Modify and experiment: Create variations of models</li> <li>Study documentation: Use <code>dbt docs serve</code></li> </ol>"},{"location":"jaffle-shop/project-setup/#for-production","title":"For Production:","text":"<ol> <li>Configure production environment with PostgreSQL/Snowflake</li> <li>Implement deployment strategies with dbt Cloud or CI/CD</li> <li>Configure data quality monitoring</li> <li>Train team in best practices</li> </ol>"},{"location":"jaffle-shop/project-setup/#final-verification","title":"\ud83c\udf89 Final Verification","text":""},{"location":"jaffle-shop/project-setup/#option-1-using-script-recommended","title":"Option 1: Using Script (Recommended)","text":"<pre><code># Return to root directory and run complete initialization\ncd ..\n./init_project.sh &amp;&amp; cd jaffle_shop &amp;&amp; dbt docs generate\n\n# \u2705 If all commands passed, your environment is perfect!\n</code></pre>"},{"location":"jaffle-shop/project-setup/#option-2-manual-commands","title":"Option 2: Manual Commands","text":"<pre><code># Complete verification command (inside jaffle_shop directory)\ndbt clean &amp;&amp; dbt deps &amp;&amp; dbt build &amp;&amp; dbt docs generate\n\n# \u2705 If all commands passed, your environment is perfect!\n</code></pre> <p>\ud83d\ude80 Congratulations! Your dbt environment is ready to use!</p> <p>Explore, experiment and learn. dbt is a powerful tool and this project provides a solid foundation to master its functionalities.</p>"}]}